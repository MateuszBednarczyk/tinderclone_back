// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	domain "tinderclone_back/src/pkg/domain"

	mock "github.com/stretchr/testify/mock"
)

// ICountryStore is an autogenerated mock type for the ICountryStore type
type ICountryStore struct {
	mock.Mock
}

// IsCountryAlreadyAvailable provides a mock function with given fields: countryName
func (_m *ICountryStore) IsCountryAlreadyAvailable(countryName string) bool {
	ret := _m.Called(countryName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(countryName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveCountry provides a mock function with given fields: entity
func (_m *ICountryStore) SaveCountry(entity *domain.Country) error {
	ret := _m.Called(entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Country) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectCountryByName provides a mock function with given fields: countryName
func (_m *ICountryStore) SelectCountryByName(countryName string) *domain.Country {
	ret := _m.Called(countryName)

	var r0 *domain.Country
	if rf, ok := ret.Get(0).(func(string) *domain.Country); ok {
		r0 = rf(countryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Country)
		}
	}

	return r0
}

type mockConstructorTestingTNewICountryStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewICountryStore creates a new instance of ICountryStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICountryStore(t mockConstructorTestingTNewICountryStore) *ICountryStore {
	mock := &ICountryStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
