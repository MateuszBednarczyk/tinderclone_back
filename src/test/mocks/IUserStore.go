// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	domain "tinderclone_back/src/pkg/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IUserStore is an autogenerated mock type for the IUserStore type
type IUserStore struct {
	mock.Mock
}

// GetAllUsersFromGivenCity provides a mock function with given fields: cityID
func (_m *IUserStore) GetAllUsersFromGivenCity(cityID uuid.UUID) ([]domain.User, error) {
	ret := _m.Called(cityID)

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]domain.User, error)); ok {
		return rf(cityID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.User); ok {
		r0 = rf(cityID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(cityID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUsersFromGivenCountry provides a mock function with given fields: countryID
func (_m *IUserStore) GetAllUsersFromGivenCountry(countryID uuid.UUID) ([]domain.User, error) {
	ret := _m.Called(countryID)

	var r0 []domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]domain.User, error)); ok {
		return rf(countryID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []domain.User); ok {
		r0 = rf(countryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(countryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUsernameAlreadyTaken provides a mock function with given fields: username
func (_m *IUserStore) IsUsernameAlreadyTaken(username string) bool {
	ret := _m.Called(username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SaveUser provides a mock function with given fields: entity
func (_m *IUserStore) SaveUser(entity *domain.User) error {
	ret := _m.Called(entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.User) error); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectUserByUsername provides a mock function with given fields: username
func (_m *IUserStore) SelectUserByUsername(username string) (*domain.User, error) {
	ret := _m.Called(username)

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRole provides a mock function with given fields: username, role
func (_m *IUserStore) UpdateUserRole(username string, role domain.Role) error {
	ret := _m.Called(username, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, domain.Role) error); ok {
		r0 = rf(username, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUserStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserStore creates a new instance of IUserStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserStore(t mockConstructorTestingTNewIUserStore) *IUserStore {
	mock := &IUserStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
